# -*- coding: utf-8 -*-
"""Task_1_AlsihAi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nn4RN_CVoWzsZ1WWN1jVKgIOp7_ofRwL
"""

!pip install ultralytics opencv-python-headless

import cv2
import os
from pathlib import Path
from ultralytics import YOLO
import json

dataset_path = Path("/content/drive/MyDrive/datasets1_task_1")  # замени на путь к папке с train2017/ и т.д.

train_dir = dataset_path / "train2017"
val_dir = dataset_path / "val2017"
test_dir = dataset_path / "test2017"

train_json = dataset_path / "instances_train2017.json"
val_json = dataset_path / "instances_val2017.json"
test_json = dataset_path / "instances_test2017.json"

print(list(train_dir.glob("*.jpg")))

preproc_train = Path("/content/drive/MyDrive/datasets1_task_1/train_sobel")
print(list(preproc_train.glob("*.*")))

def preprocess_image(img_path, save_path):
    img = cv2.imread(str(img_path))
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    sobelx = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
    sobely = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
    sobel = cv2.magnitude(sobelx, sobely)
    sobel = cv2.normalize(sobel, None, 0, 255, cv2.NORM_MINMAX)
    cv2.imwrite(str(save_path), sobel)


preproc_train = dataset_path / "train_sobel"
preproc_val = dataset_path / "val_sobel"
preproc_train.mkdir(exist_ok=True)
preproc_val.mkdir(exist_ok=True)


for img_file in train_dir.glob("*.jpg"):
    preprocess_image(img_file, preproc_train / img_file.name)

for img_file in val_dir.glob("*.jpg"):
    preprocess_image(img_file, preproc_val / img_file.name)

yolo_data_yaml = dataset_path / "my_dataset.yaml"
with open(yolo_data_yaml, "w") as f:
    f.write(f"""
train: {preproc_train}
val: {preproc_val}
test: {test_dir}
nc: 6
names: ['dent','scratch','crack','glass shatter','lamp broken','tire flat']
""")

model = YOLO("yolov8n-seg.pt")  # можно заменить на yolov8s-seg.pt
model.train(
    data=str(yolo_data_yaml),
    imgsz=640,
    epochs=10,
    batch=8,
    name="yolov8_sobel_seg",
    project="runs"
)

test_img = list(preproc_val.glob("*.jpg"))[0]
results = model.predict(source=str(test_img), show=True)


